name: Publish to PyPI

# Publish package to PyPI when a version tag is pushed
on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:  # Allow manual triggering

# Set permissions for trusted publishing (recommended over API tokens)
permissions:
  contents: write  # For creating GitHub releases
  id-token: write  # For trusted publishing to PyPI

jobs:
  # Run tests before publishing
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.12', '3.13']

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
        cache-dependency-glob: "uv.lock"

    - name: Install dependencies
      run: |
        uv sync --all-extras --dev

    - name: Run tests
      run: |
        uv run pytest --cov=src --cov-report=term-missing

    - name: Run pre-commit hooks
      run: |
        uv run pre-commit run --all-files

  # Build and publish package
  build-and-publish:
    needs: test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for proper versioning

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
        cache-dependency-glob: "uv.lock"

    - name: Install dependencies
      run: |
        uv sync --all-extras --dev

    - name: Build package
      run: |
        uv build

    - name: Verify package contents
      run: |
        uv run twine check dist/*

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        # Use trusted publishing instead of API tokens (more secure)
        # Configure this in your PyPI project settings
        attestations: true
        verbose: true

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        name: PDF-PyCrack ${{ github.ref_name }}
        draft: false
        prerelease: false
        generate_release_notes: false
        body: |
          # PDF-PyCrack ${{ github.ref_name }} - Initial Release üöÄ

          We're excited to announce the first official release of **PDF-PyCrack**, a high-performance PDF password cracking tool written in Python 3.12+!

          ## üåü Key Features

          ### Multi-Core Performance
          - **Parallel Processing**: Utilizes all available CPU cores for maximum cracking speed
          - **Efficient Worker Management**: Resilient worker processes that handle errors gracefully while the main process continues
          - **Optimized Batch Processing**: Configurable batch sizes for optimal performance

          ### Memory & Performance Optimizations
          - **Efficient Memory Usage**: Handles large PDF files with minimal RAM consumption
          - **Real-time Progress Tracking**: Live progress bars and detailed statistics
          - **Customizable Parameters**: Fine-tune password length, character sets, batch sizes, and more

          ### Comprehensive Error Handling
          - **Robust Error Management**: Clear, actionable error messages for all edge cases
          - **Extensive Test Coverage**: Comprehensive test suite covering error scenarios
          - **Graceful Failure Handling**: Worker process failures don't crash the main application

          ### Easy Installation & Usage
          - **PyPI Package**: Available as `pdf-pycrack` on PyPI for easy installation
          - **Command Line Interface**: Simple CLI with comprehensive help and options
          - **Python Library**: Can be used programmatically in Python applications

          ## üì¶ Installation

          Install from PyPI:
          ```bash
          uv pip install pdf-pycrack
          ```

          Or with pip:
          ```bash
          pip install pdf-pycrack
          ```

          ## üöÄ Quick Start

          **Command line:**
          ```bash
          pdf-pycrack your_encrypted_file.pdf
          ```

          **As a Python library:**
          ```python
          from pdf_pycrack import crack_pdf_password, PasswordFound

          result = crack_pdf_password("encrypted.pdf", min_len=4, max_len=6)
          if isinstance(result, PasswordFound):
              print(f"Password found: {result.password}")
          ```

          ## üõ†Ô∏è Technical Highlights

          - **Python 3.12+ Support**: Built for modern Python with type hints and latest features
          - **Multiprocessing Architecture**: Scales efficiently across multiple CPU cores
          - **pikepdf Integration**: Reliable PDF handling with comprehensive format support
          - **Rich Terminal Output**: Beautiful progress bars and formatted output using rich and tqdm
          - **Comprehensive Testing**: Extensive test suite with multiple password types and edge cases

          ## üìä Performance & Benchmarking

          - Includes advanced benchmarking tools for performance measurement
          - Supports custom character sets, password lengths, and batch sizes
          - Optimized for both speed and memory efficiency

          ## üîß Development Features

          - **Modern Build System**: Uses `uv` for fast dependency management
          - **Code Quality**: Pre-commit hooks, black formatting, and comprehensive linting
          - **CI/CD Pipeline**: Automated testing across Python 3.12 and 3.13
          - **Documentation**: Complete API documentation and usage examples

          ## üéØ Use Cases

          Perfect for:
          - Security professionals testing PDF password strength
          - Digital forensics and recovery scenarios
          - Educational purposes and security research
          - Automation workflows requiring PDF password recovery

          ## üìà What's Next

          This initial release establishes a solid foundation with core functionality. Future releases will focus on:
          - Performance optimizations and algorithm improvements
          - Additional password generation strategies
          - Enhanced reporting and analytics
          - Extended file format support

          ## üôè Acknowledgments

          Thank you to the open source community and the maintainers of pikepdf, tqdm, and rich for providing the excellent libraries that make this project possible.

          ---

          **Full Changelog**: https://github.com/hornikmatej/pdf_pycrack/commits/${{ github.ref_name }}
          **Documentation**: https://github.com/hornikmatej/pdf_pycrack#readme
          **Issues & Support**: https://github.com/hornikmatej/pdf_pycrack/issues
